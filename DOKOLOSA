LAB9

#Zadanie 1

#Wczytaj do DataFrame arkusz z narodzinami dzieci w Polsce dostępny w pliku /datasets/imiona.xlsx

import pandas as pd

xlsx = pd.ExcelFile('imiona.xlsx')

df = pd.read_excel(xlsx, header=0)

print("Zadanie 1")

print(df.head())

#Zadanie 2

#Z danych z zadania 1 wyświetl (korzystając w miarę możliwości z funkcji biblioteki Pandas):

# •tylko te rekordy gdzie liczba nadanych imion była większa niż 1000 w danym roku

# •tylko rekordy gdzie nadane imię jest takie jak Twoje

# •sumę wszystkich urodzonych dzieci w całym danym okresie,

# •sumędzieci urodzonych w latach 2000-2005•sumę urodzonych chłopców i dziewczynek,

# •najbardziej popularne imię dziewczynki i chłopca w danym roku ( czyli po 2 rekordy na rok),

# •najbardziej popularne imię dziewczynki i chłopca w całym danym okresie,

print("Zadanie 2")

df_gt_1000 = df[df['Liczba'] > 1000]

df_my_name = df[df['Imie'] == 'MACIEJ']

suma_urodzonych = df['Liczba'].sum()

suma_urodzonych_2000_2005 = df[(df['Rok'] >= 2000) & (df['Rok'] <= 2005)]['Liczba'].sum()

suma_chlopcow = df[df['Plec'] == 'M']['Liczba'].sum()

suma_dziewczynek = df[df['Plec'] == 'K']['Liczba'].sum()

najpopularniejsze_imiona = df.groupby(['Rok', 'Plec']).apply(lambda x: x.nlargest(1, 'Liczba')).reset_index(drop=True)

najpopularniejsze_imiona_cały_okres = df.groupby(['Imie', 'Plec']).sum().reset_index().sort_values(by='Liczba', ascending=False).groupby('Plec').first()

print("Rekordy, gdzie liczba nadanych imion była większa niż 1000 w danym roku:")

print(df_gt_1000)

print("\nRekordy, gdzie nadane imię jest takie jak Twoje:")

print(df_my_name)

print("\nSuma wszystkich urodzonych dzieci w całym danym okresie:", suma_urodzonych)

print("\nSuma dzieci urodzonych w latach 2000-2005:", suma_urodzonych_2000_2005)

print("\nSuma urodzonych chłopców:", suma_chlopcow)

print("Suma urodzonych dziewczynek:", suma_dziewczynek)

print("\nNajbardziej popularne imię dziewczynki i chłopca w danym roku:")

print(najpopularniejsze_imiona)

print("\nNajbardziej popularne imię dziewczynki i chłopca w całym danym okresie:")

print(najpopularniejsze_imiona_cały_okres)

#Zadanie 3

#Wczytaj plik /datasets/zamowienia.csv a następnie wyświetl:

# •listę unikalnych nazwisk sprzedawców (przetwarzając zwróconą pojedynczą kolumnę z DataFrame)

# •5 najwyższych wartości zamówień

# •ilość zamówień złożonych przez każdego sprzedawcę

# •sumę zamówień dla każdego kraju

# •sumę zamówień dla roku 2005, dla sprzedawców z Polski

# •średnią kwotę zamówienia w 2004 roku,

# •zapisz dane za 2004 rok do pliku zamówienia_2004.csv a dane za 2005 do pliku zamówienia_2005.csv

print("Zadanie 3")

df1 = pd.read_csv('zamowienia.csv',header=0, sep=";",decimal='.')

print(df1.head())

df1['Data'] = pd.to_datetime(df1['Data zamowienia'])

df1['Rok'] = df1['Data'].dt.year

unikalne_nazwiska_sprzedawcow = df1['Sprzedawca'].unique()

najwyzsze_zamowienia = df1.nlargest(5, 'Utarg')

ilosc_zamowien_sprzedawcow = df1['Sprzedawca'].value_counts()

suma_zamowien_kraje = df1.groupby('Kraj')['Utarg'].sum()

suma_zamowien_polska_2005 = df1[(df1['Rok'] == 2005) & (df1['Kraj'] == 'Polska')]['Utarg'].sum()

srednia_kwota_2004 = df1[df1['Rok'] == 2004]['Utarg'].mean()

df1[df1['Rok'] == 2004].to_csv('zamowienia_2004.csv', index=False)

df1[df1['Rok'] == 2005].to_csv('zamowienia_2005.csv', index=False)

print("Lista unikalnych nazwisk sprzedawców:")

print(unikalne_nazwiska_sprzedawcow)

print("\n5 najwyższych wartości zamówień:")

print(najwyzsze_zamowienia)

print("\nIlość zamówień złożonych przez każdego sprzedawcę:")

print(ilosc_zamowien_sprzedawcow)

print("\nSuma zamówień dla każdego kraju:")

print(suma_zamowien_kraje)

print("\nSuma zamówień dla roku 2005, dla sprzedawców z Polski:")

print(suma_zamowien_polska_2005)

print("\nŚrednia kwota zamówienia w 2004 roku:")

print(srednia_kwota_2004)

LAB8

#Zadanie 1

# Utwórz dwie macierze 1x3 różnych wartości a następnie wykonaj operację mnożenia.

import numpy as np

macierz1 = np.array([2, 4, 6])

macierz2 = np.array([1, 3, 5])

wynik = macierz1 * macierz2

print("Zadanei 1")

print(wynik)

#Zadanie 2

#Utwórz macierz 3x3 oraz 4x4 i znajdź najniższe wartości dla każdej kolumny i każdego rzędu.

print("Zadanie 2")

macierz_3x3 = np.array([[9, 2, 5],

                        [1, 7, 3],

                        [4, 6, 8]])

min_k_3x3 = np.amin(macierz_3x3, axis=0)

print("Najniższe wartości dla każdej kolumny w macierzy 3x3:")

print(min_k_3x3)

min_w_3x3 = np.amin(macierz_3x3, axis=1)

print("Najniższe wartości dla każdego wiersza w macierzy 3x3:")

print(min_w_3x3)

macierz_4x4 = np.array([[7, 5, 2, 9],

                        [3, 1, 8, 4],

                        [6, 2, 4, 7],

                        [9, 3, 1, 5]])

min_k_4x4 = np.amin(macierz_4x4, axis=0)

print("Najniższe wartości dla każdej kolumny w macierzy 4x4:")

print(min_k_4x4)

min_w_4x4 = np.amin(macierz_4x4, axis=1)

print("Najniższe wartości dla każdego wiersza w macierzy 4x4:")

print(min_w_4x4)

#Zadanie 3

#Wykorzystaj macierze z zadania pierwszego i wykonaj iloczyn macierzy.

iloczyn = np.dot(macierz1, macierz2)

print("Zadanie 3")

print(iloczyn)

#Zadanie 4

#Utwórz dwie macierze 1x3 gdzie pierwsza z nich będzie zawierała liczby całkowite, a druga liczby rzeczywiste.

# Następnie wykonaj na nich operację mnożenia.

macierz4_1 = np.array([1, 2, 3], dtype=int)

macierz4_2 = np.array([1.5, 2.5, 3.5], dtype=float)

wynik4= np.multiply(macierz4_1, macierz4_2)

print("Zadanie 4")

print(wynik4)

#Zadanie 5

#Utwórz macierz 2x3 różnych wartości a następnie wylicz sinus dla każdej z jej wartości i zapisz do zmiennej “a”.

macierz = np.array([[1, 2, 3], [4, 5, 6]])

a = np.sin(macierz)

print("Zadanei 5")

print("Macierz:")

print(macierz)

print("Sinusy:")

print(a)

#Zadanie 6

#Utwórz nową macierz 2x3 różnych wartości a następnie wylicz cosinus dla każdej z jej wartości i zapisz do zmiennej “b”.

print("Zadanei 6")

macierz6 = np.array([[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]])

b = np.cos(macierz6)

print("Macierz:")

print(macierz6)

print("Cosinusy:")

print(b)

#Zadanie 7

#Wykonaj funkcję dodawania obu macierzy zapisanych wcześniej do zmiennych a i b.

print("Zadanie 7")

wynik7 = a + b

print("Macierz a (sinusy):")

print(a)

print("Macierz b (cosinusy):")

print(b)

print("Wynik dodawania:")

print(wynik7)

#Zadanie 8

#Wygeneruj macierz 3x3 i wyświetl w pętli każdy z rzędów.

print("Zadanie 8")

macierz8 = np.array([[1, 2, 3],

                   [4, 5, 6],

                   [7, 8, 9]])

for row in macierz8:

    print(row)

#Zadanie 9

#Wygeneruj macierz 3x3 i wyświetl w pętli każdy element korzystając z opcji “spłaszczenia” macierzy.

# (użyj funkcji flat())

print("Zadanie 9")

macierz9 = np.array([[1, 2, 3],

                   [4, 5, 6],

                   [7, 8, 9]])

for element in macierz9.flat:

    print(element)

#Zadanie 10

#Wygeneruj macierz 9x9 a następnie zmień jej kształt. Jakie mamy możliwości i dlaczego?

print("Zadanie 10")

macierz10 = np.arange(1, 82).reshape(9, 9)

new_shape1 = macierz10.reshape(3, 27)

new_shape2 = macierz10.reshape(27, 3)

new_shape3 = macierz10.reshape(1, 81)

print("Macierz 3x27:")

print(new_shape1)

print("Macierz 27x3:")

print(new_shape2)

print("Macierz 1x81:")

print(new_shape3)

#Po wygenerowaniu macierzy 9x9, mamy różne możliwości zmiany jej kształtu

# (czyli zmiany liczby wierszy i kolumn) w zależności od wymagań i potrzeb naszego zadania.

# Oto kilka możliwości zmiany kształtu macierzy 9x9:

#1. Zamiana na macierz 3x27:

#    Możemy zmienić kształt macierzy 9x9 na 3x27, gdzie każdy wiersz macierzy 9x9 staje się wierszem macierzy 3x27.

#    W tej konfiguracji, każdy wiersz macierzy 3x27 będzie zawierał oryginalne elementy jednego wiersza macierzy 9x9.

# 2. Zamiana na macierz 27x3:

#    Możemy również zmienić kształt macierzy 9x9 na 27x3,

#    gdzie każdy kolumna macierzy 9x9 staje się kolumną macierzy 27x3.

#    W tej konfiguracji, każda kolumna macierzy 27x3 będzie zawierać oryginalne elementy jednej kolumny macierzy 9x9.

# 3. Zamiana na macierz 1x81:

#    Inną możliwością jest zmiana kształtu macierzy 9x9 na macierz 1x81. W tej konfiguracji,

#    wszystkie elementy macierzy 9x9 są łączone w jednym wierszu macierzy 1x81.

# 4. Zamiana na macierz 18x4 lub 36x2:

#    Możemy także zmienić macierz 9x9 na macierz 18x4 lub 36x2, podzielając macierz na mniejsze bloki.

# Dlaczego mamy te różne możliwości zmiany kształtu? Dzieje się tak, ponieważ liczba elementów w macierzy

# (w tym przypadku 9x9 = 81) pozostaje taka sama, niezależnie od kształtu.

# Możemy manipulować kształtem macierzy w celu dostosowania jej do wymagań obliczeniowych,

# analizy danych lub innych operacji, które są bardziej efektywne lub łatwiejsze do wykonania na macierzy o określonym kształcie.

#Zadanie 11

#Wygeneruj macierz płaską (wektor) i przekształć ją na macierz 3x4. Wygeneruj w ten sposób jeszcze kombinacje 4x3 i 2x6.

# Spłaszcz każdą z nich i wyświetl wyniki.

print("Zadanie 11")

vector = np.arange(1, 13)

macierz_3x4 = vector.reshape(3, 4)

macierz_4x3 = vector.reshape(4, 3)

macierz_2x6 = vector.reshape(2, 6)

print("Macierz 3x4:")

print(macierz_3x4)

print("Spłaszczona macierz 3x4:")

print(macierz_3x4.flatten())

print("Macierz 4x3:")

print(macierz_4x3)

print("Spłaszczona macierz 4x3:")

print(macierz_4x3.flatten())

print("Macierz 2x6:")

print(macierz_2x6)

print("Spłaszczona macierz 2x6:")

print(macierz_2x6.flatten())

LAB10

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

#Zadanie 1

#Stwórz wykres liniowy, który wyświetli liczbę urodzonych dzieci dla każdego roku.

df = pd.read_excel('imiona.xlsx')

dzieci_na_rok = df.groupby('Rok')['Liczba'].sum()

plt.plot(dzieci_na_rok.index, dzieci_na_rok.values, marker='o')

plt.title('Liczba urodzonych dzieci dla każdego roku')

plt.xlabel('Rok')

plt.ylabel('Liczba urodzeń')

plt.show()

#Zadanie 2

#Stwórz wykres słupkowy, który wyświetli liczbę urodzonych chłopców i dziewczynek z całego zbioru.

urodzenia_plec = df.groupby('Plec')['Liczba'].sum()

plt.bar(urodzenia_plec.index, urodzenia_plec.values)

for i, value in enumerate(urodzenia_plec.values):

    plt.text(i, value, str(value), ha='center', va='bottom')

plt.title('Liczba urodzonych chłopców i dziewczynek')

plt.xlabel('Plec')

plt.ylabel('Liczba urodzeń')

plt.show()

#Zadanie 3

#Wykres kołowy z wartościami % ukazującymi ilość urodzonych chłopców i dziewczynek w ostatnich 5 latach z datasetu.

ostatnie_5_lat = df[df['Rok'] >= df['Rok'].max() - 4]

urodzenia_plec = ostatnie_5_lat.groupby('Plec')['Liczba'].sum()

plt.pie(urodzenia_plec, labels=urodzenia_plec.index, autopct='%1.1f%%')

plt.title('Ilość urodzonych chłopców i dziewczynek w ostatnich 5 latach')

plt.show()

#Zadanie 4

#Wyświetl na pomocą wykresu słupkowego ilość złożonych zamówień przez poszczególnych sprzedawców (zbiór danych zamówienia.csv).

df1 = pd.read_csv('zamowienia.csv')

ilosc_zamowien_sprzedawcy = df1['Sprzedawca'].value_counts()

ilosc_zamowien_sprzedawcy = df1['Sprzedawca'].value_counts()

plt.bar(ilosc_zamowien_sprzedawcy.index, ilosc_zamowien_sprzedawcy.values)

for i, value in enumerate(ilosc_zamowien_sprzedawcy.values):

    plt.text(i, value, str(value), ha='center', va='bottom')

plt.xticks(rotation=90)

plt.title('Ilość złożonych zamówień przez sprzedawców')

plt.xlabel('Sprzedawca')

plt.ylabel('Ilość zamówień')

plt.tight_layout()

plt.show()

LAB11

#Zadanie 1

#Na wykresie wyświetl wykres liniowy funkcji f(x) = 1/x dla x ε[1, 20].

# Dodaj etykietę do linii wykresu i wyświetl legendę.

# Dodaj odpowiednie etykiety do osi wykresu (‘x’, ’f(x)’) oraz ustaw zakres osi na (0, 1) oraz (1, długość wektora x).

x = np.arange(1, 21, 1)

plt.plot(x, 1/x, label='f(x) = 1/x')

plt.xlabel('x')

plt.ylabel('f(x)')

plt.axis([0, 20, 0, 1])

plt.legend()

plt.title('Wykres funkcji f(x) = 1/x dla x[1,20]')

plt.show()

#Zadanie 2

#Zmodyfikuj wykres z zadania 1 tak, żeby styl wykresu wyglądał tak jak na poniższym zrzucie ekranu.

x = np.arange(1, 21, 1)

plt.plot(x, 1/x, 'g>:', label='f(x) = 1/x' )

plt.xlabel('x')

plt.ylabel('f(x)')

plt.axis([0, 20, 0, 1])

plt.legend()

plt.title('Wykres funkcji f(x) = 1/x dla x[1,20]')

plt.show()

#Zadanie 3

#Na jednym wykresie wygeneruj wykresy funkcji sin(x) oraz cos(x) dla x ε[0, 30] z krokiem 0.1.

# Dodaj etykiety i legendę do wykresu.

x = np.arange(0, 30, .1)

plt.plot(x, np.sin(x), 'b', label='sin(x)')

plt.plot(x, np.cos(x), 'r', label='cos(x)')

plt.xlabel('x')

plt.ylabel('sin(x) cos(x)')

plt.legend(loc='upper right')

plt.title('Wykres sin(x), cos(x)')

plt.show()

#Zadanie 4

#Korzystając ze zbioru danych Iris (https://archive.ics.uci.edu/ml/datasets/iris)

# wygeneruj wykres punktowy, gdzie wektor x to wartość ‘sepal length’ a y to ‘sepal width’,

# dodaj paletę kolorów c na przykładzie listingu 6 a parametr s niech będzie wartością absolutną

# z różnicy wartości poszczególnych elementów wektorów x oraz y.

df = pd.read_csv('iris.data', header=0, sep=',', decimal='.')

print(df)

colors = np.random.randint(0, 50, len(df.index))

scale = np.abs(df['sepal length'] - df['sepal width'])

plt.scatter(df['sepal length'], df['sepal width'], c=colors, s=scale)

plt.xlabel('sepal length')

plt.ylabel('sepal width')

plt.show()

#Zadanie 5

#Korzystając z biblioteki pandas wczytaj zbiór danych z narodzinami dzieci przedstawiony w lekcji 8.

# Następnie na jednym płótnie wyświetl 3 wykresy (jeden wiersz i 3 kolumny).

# Dodaj do wykresów stosowne etykiety.

# Poustawiaj różne kolory dla wykresów.

# 1 wykres –wykres słupkowy przedstawiający ilość narodzonych dziewczynek i chłopców w całym okresie.

# 2 wykres –wykres liniowy, gdzie będą dwie linie, jedna dla ilości urodzonych kobiet, druga dla mężczyzn dla każdego roku z osobna.

#   Czyli y to ilość narodzonych kobiet lub mężczyzn (dwie linie), x to rok.

# 3 wykres –wykres słupkowy przedstawiający sumę urodzonych dzieci w każdym roku.

xlsx = pd.ExcelFile('imiona.xlsx')

df = pd.read_excel(xlsx, header=0)

print(df)

plt.subplot(1, 3, 1)

grouped = df.groupby('Plec')

etykiety = list(grouped.groups.keys())

wartosci = list(grouped.agg('Liczba').sum())

plt.bar(x=etykiety, height=wartosci, color=['green', 'red'])

plt.xlabel('Płeć')

plt.ylabel('Liczba narodzonych dzieci')

plt.subplot(1, 3, 2)

x = df['Rok'].unique()

kobiety = df[(df.Plec == 'K')].groupby('Rok').agg({'Liczba':['sum']}).values

mezczyzni = df[(df.Plec == 'M')].groupby('Rok').agg({'Liczba':['sum']}).values

plt.plot(x, kobiety, label="Kobiety")

plt.plot(x, mezczyzni, label="Mężczyźni")

plt.xlabel('Rok')

plt.subplot(1, 3, 3)

x = df['Rok'].unique()

y = df.groupby('Rok').agg('Liczba').sum()

plt.bar(x, y)

plt.xlabel('Rok')

plt.subplots_adjust(wspace=0.85)

plt.show()

LAB12

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

#Zadanie 1

#Wykres Liniowy

sns.set(rc={'figure.figsize': (8, 8)})

sns.lineplot(x=[1, 2, 3, 4], y=[1, 4, 9, 16],

             label='linia nr1', color='red', marker='o', linestyle=':')

sns.lineplot(x=[1, 2, 3, 4], y=[2, 5, 10, 17],

             label='linia nr2', color='green', marker='^', linestyle=':')

plt.xlabel('oś x')

plt.ylabel('oś y')

plt.title('Wykres liniowy')

plt.show()

#Zadanie 2

#Wykres liniowy z wykorzystaniem serii danych

s = pd.Series(np.random.randn(1000))

s = s.cumsum()

sns.set()

wykres = sns.relplot(kind='line', data=s, label='linia')

wykres.fig.set_size_inches(8, 6)

wykres.fig.suptitle('Wykres liniowy losowych danych')

wykres.set_xlabels('indeksy')

wykres.set_ylabels('wartości')

wykres.add_legend()

wykres.figure.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9)

plt.show()

#Zadanie 3

#Wykers liniowy z wykorzystaniem ramki danych

sns.set()

df = pd.read_csv('iris.data', header=0, sep=',', decimal='.')

print(df)

wykres = sns.lineplot(data=df, x=df.index, y='sepal length', hue='class')

wykres.set_xlabel('indeksy')

wykres.set_title('Wykres liniowy danych z Iris dataset')

wykres.legend(title='Rodzaj kwiatu')

plt.show()

#Zadanie 4

#Wykres punktowy

sns.set()

data = {'a': np.arange(10),

        'c': np.random.randint(0, 50, 10),

        'd': np.random.randn(10)}

data['b'] = data['a'] + 10 * np.random.randn(10)

data['d'] = np.abs(data['d']) * 100

print(data['c'])

print(data['d'])

df = pd.DataFrame(data)

plot = sns.relplot(data=df, x="a", y="b", hue="c", palette='bright', size="d", legend=True)

plot.fig.set_size_inches(6, 6)

plot.set(xticks=data['a'])

plt.show()

#Zadanie 5

#Wykres kolumnowy

data = {'Kraj': ['Belgia', 'Indie', 'Brazylia', 'Polska'],

        'Stolica': ['Bruksela', 'New Delhi', 'Brasilia', 'Warszawa'],

        'Kontynent': ['Europa', 'Azja', 'AmerykaPołudniowa', 'Europa'],

        'Populacja': [11190846, 1303171035, 207847528, 38675467]}

df = pd.DataFrame(data)

sns.set()# plot = sns.catplot(data=df, x='Kontynent', y='Populacja', kind='bar', ci=None, hue='Kontynent', estimator=np.sum,

#                    dodge=False, palette=['red', 'green', 'yellow'], legend_out=False)

# plot.fig.set_size_inches(7, 6)

# plot.add_legend(title='Populacja na kontynentach', loc='upper right')

# plot.fig.suptitle('Populacja na kontynentach')

#

plot = sns.barplot(data=df, x='Kontynent', y='Populacja',

                   ci=None, hue='Kontynent', estimator=np.sum,

                   dodge=False, palette=['red', 'green', 'yellow'])

plot.legend(title='Populacja na kontynentach')

plot.set(title='Wykres słupkowy')

plt.show()
